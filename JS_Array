<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title></title>
	</head>
	<body>
		<script>
			//数组：一组有序的数据 顺序结构     数据集    一次可以输入多个元素
			//定义数组得方式： 构造函数/字面量
			var color = ['black','green','yelllow']
			console.log(color[0])
			color[1] = 'pink';       //通过下标改变元素的值
			console.log(color)
			color.length = 2;
			console.log(color[2])   //定义长度可拓展或截取数组
			if (Array.isArray(color)){
				console.log('Color is Array.' + '<br />')
			}
			console.log(color.toString())   
			console.log(color.valueOf())    //对象.方法
			console.log(color.join('||'))   //替换分隔符
			
			//toLocalesting和toString
			var person = {    //对象的方法，用函数块表示
				toLocaleString : function a(){
					return 'Necholas'},   //注意逗号,将对象的方法隔开
				toString : function b(){
					return 'zhaosi'}
			}
     		var people = [person]   //数组化
			console.log(people.toLocaleString())
			console.log(people.toString()) 
			
			 
			//堆栈方法（后进先出）：push和pop     队列方法（后进后出）：push和shift   **************
			var colors = new Array();     //通过构造函数创建数组  new Array()  声明对象
			var count = colors.push('black', 'blue')  //push后入
			console.log(count)
			var item1 = colors.pop()  //pop后出,指向最后一项
			console.log(item1)
			console.log(colors) 
			var item2 = colors.push('green' ,'yellow')
			var item3 = colors.shift()  //shift前出,指向第一项
			console.log(item2)
			console.log(item3)
			console.log(colors) 
			var item4 = colors.unshift('white')  //unshift 前入
			console.log(item4)
			console.log(colors) 
			
			//排序： reverse()和sort()
            a = colors.reverse()
            b = colors.sort()
			console.log(a)
			console.log(b)
			function compare(value1, value2){
				if (value1 < value2){return 1}
				else if (value1 > value2){return -1}
				else {return 0}
			}
			var numberArray = [31,14,52,1,6]
			rise = numberArray.sort(compare)         //数组.sort(函数)
			//从大到小排序，-1是指示，直接写compare，而不是compare()
			console.log(rise)
			
			//concat、slice、splice
			var colors2 = ['green', 'purple', 'pink', 'green', 'orange']
			var colors3 = colors2.concat(['black', 'white', ['yellow','red']])  //连接
			var colors4 = colors3.slice(2)  //切片，从该位置开始（保留）
			var colors5 = colors3.slice(1,4)  //从该位置开始，不包括末位置
	        console.log(colors3)
	        console.log(colors4)
	        console.log(colors5)
			var removed = colors2.splice(2,1,'white','black') //从pink开始删一项，替换..
			console.log(removed)
			console.log(colors2)
			a = colors2.indexOf('purple')  //Array.indexOf 从左往右找第一个的位置
			b = colors2.lastIndexOf('green')  //Array.lastIndexOf 从右往左找的第一个的位置
			console.log(a)
			console.log(b)
			
//			filter()函数用来过滤 参数可以是方法 
		    var num_arr = [1,2,3,4,5,6,7,8]
		    var even = num_arr.filter(function(n){
		    	return n%2 == 0       //返回多个数以数组的方式输出 不过不能同时返回两个以上变量
		    })
			console.log(even)
		 
		   //every some filter map reduce reduceRight
			var numbers = [1,2,3,4,5,4,3,2,1]
			var everyResult = numbers.every(function(item, index, array){
				return (item > 2);
			})
			var someResult = numbers.some(function(item, index, array){
				return (item > 2)
			})
			var filterResult = numbers.filter(function(item, index, array){
				return (item > 2)
			})
			var mapResult = numbers.map(function(item, index, array){
				return (item * 2)
			})
			var sum = numbers.reduce(function(pre, cur, index, array){
				return (pre + cur)
			})
			var sum1 = numbers.reduceRight((function(pre, cur, index, array){
				return (pre + cur)
			}))
			console.log(everyResult)
			console.log(someResult)
			console.log(filterResult)
			console.log(mapResult)
			console.log(sum)
			console.log(sum1)
			

			
			var someone = [{name: 'Jerry', age: 24},{name: 'Alice', age: 21}]   //数组中嵌套对象
			console.log(someone[0].name)
			//遍历数组中的元素  可以用循环或者for(..in..)
			var people_Arr = ['Mike','Jame','Alice']
            for(i in people_Arr){
            	console.log(people_Arr[i])
            }
            
		</script>
	</body>
</html>
